name: Build and Share Packer Images

on:
  push:
    branches:
      - main  # Runs only when code is merged to the main branch

jobs:
  build-image:
    name: Build AWS & GCP Images with Packer
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up GCP Credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Activate GCP Service Account
        run: |
          echo "Activating GCP Service Account..."
          gcloud auth activate-service-account gcp-dev@csye6225-dev-451702.iam.gserviceaccount.com --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          
          echo "Setting GCP active account..."
          gcloud config set account gcp-dev@csye6225-dev-451702.iam.gserviceaccount.com

          echo "Verifying authentication..."
          gcloud auth list
          gcloud config list

      - name: Install Packer
        uses: hashicorp/setup-packer@v3
        with:
          version: latest

      - name: Zip Repository Code
        run: |
          mkdir webapp                     
          cp -r $(ls -A | grep -v '^webapp$') webapp/                
          zip -r webapp.zip webapp -x "webapp/node_modules/*" "webapp/.git/*"
      
      

      - name: Run Packer to Build Images
        id: packer
        run: |
          cd packer
          packer init main.pkr.hcl
          packer build -machine-readable main.pkr.hcl | tee packer.log

          # Extract AWS AMI ID
          AMI_ID=$(awk -F, '/artifact,[0-9]+,id/ {print $6}' packer.log | grep 'ami-' | head -n1 | cut -d: -f2 | tr -d '[:space:]')

          # Extract GCP Image ID
          GCP_IMAGE_ID=$(awk -F, '/artifact,[0-9]+,id/ {print $6}' packer.log | grep -v 'ami-' | head -n1 | tr -d '[:space:]')

          # Validate and write to output
          if [[ "$AMI_ID" =~ ^ami-[a-zA-Z0-9]+$ ]]; then
              echo "New AWS AMI: $AMI_ID"
              echo "ami_id=$AMI_ID" >> $GITHUB_ENV
              echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
              echo "AMI_CREATED=true" >> $GITHUB_ENV
          else
              echo "Error: Invalid AMI format ($AMI_ID)"
              exit 1
          fi

          if [[ -n "$GCP_IMAGE_ID" ]]; then
              echo "New GCP Image: $GCP_IMAGE_ID"
              echo "gcp_image_id=$GCP_IMAGE_ID" >> $GITHUB_ENV
              echo "gcp_image_id=$GCP_IMAGE_ID" >> $GITHUB_OUTPUT
              echo "AMI_CREATED=true" >> $GITHUB_ENV
          else
              echo "Error: Invalid GCP Image ID ($GCP_IMAGE_ID)"
              exit 1
          fi
          
      - name: Share AWS AMI with Demo Account
        if: env.AMI_CREATED == 'true'
        run: |
          if [ -z "${{ secrets.DEMO_ACCOUNT_ID }}" ]; then
            echo "DEMO_ACCOUNT_ID is not set so skipping the AMI image sharing"
          else
            aws ec2 modify-image-attribute \
              --image-id ${{ env.ami_id }} \
              --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }}}]" \
              --region "${{ secrets.AWS_REGION }}"
          fi
      
      - name: Set GCP Active Account
        run: |
          gcloud auth activate-service-account gcp-dev@csye6225-dev-451702.iam.gserviceaccount.com --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gcloud config set account gcp-dev@csye6225-dev-451702.iam.gserviceaccount.com
          gcloud auth list  # Debugging step to verify the active account

      - name: Verify Extracted Values Before Sharing
        run: |
          echo "==== Debugging Step: Printing Extracted Variables ===="
          echo "GCP Project ID: ${{ secrets.GCP_PROJECT_ID }}"
          echo "Demo Account Email: ${{ secrets.GCP_DEMO_ACCOUNT_EMAIL }}"
          echo "Extracted GCP Image ID: ${{ env.gcp_image_id }}"

          if [[ -z "${{ env.gcp_image_id }}" ]]; then
            echo "ERROR: gcp_image_id is empty! The image creation step may have failed."
            exit 1
          fi

          if [[ -z "${{ secrets.GCP_PROJECT_ID }}" ]]; then
            echo "ERROR: GCP_PROJECT_ID is missing. Ensure the secret is correctly set."
            exit 1
          fi

          if [[ -z "${{ secrets.GCP_DEMO_ACCOUNT_EMAIL }}" ]]; then
            echo " ERROR: GCP_DEMO_ACCOUNT_EMAIL is missing. Ensure the secret is correctly set."
            exit 1
          fi

      # - name: Check IAM Permissions for Dev Service Account
      #   run: |
      #     echo "==== Checking IAM Permissions for Dev Service Account ===="
      #     SERVICE_ACCOUNT="serviceAccount:gcp-dev@csye6225-dev-451702.iam.gserviceaccount.com"

      #     echo "üîç Listing assigned roles..."
      #     gcloud projects get-iam-policy ${{ secrets.GCP_PROJECT_ID }} \
      #       --flatten="bindings[].members" \
      #       --format="table(bindings.role)" \
      #       --filter="bindings.members:$SERVICE_ACCOUNT" || {
      #       echo " ERROR: Failed to retrieve IAM roles for $SERVICE_ACCOUNT"
      #       exit 1
      #     }

      - name: Wait for GCP Image Availability
        run: |
          echo " Waiting 30 seconds for GCP image to be fully available..."
          sleep 30

      - name: Check if Image Exists in GCP
        run: |
          echo "üîç Checking if GCP Image exists..."
          gcloud compute images describe ${{ env.gcp_image_id }} --project=${{ secrets.GCP_PROJECT_ID }} || {
            echo " ERROR: Image ${{ env.gcp_image_id }} not found in project ${{ secrets.GCP_PROJECT_ID }}. Exiting."
            exit 1
          }
          echo "Image ${{ env.gcp_image_id }} found."

      - name: Share GCP Image with Demo Account
        run: |
          echo " Assigning IAM policies to image: ${{ env.gcp_image_id }}"

          echo " Checking current IAM policies for image..."
          gcloud compute images get-iam-policy ${{ env.gcp_image_id }} --project=${{ secrets.GCP_PROJECT_ID }}

          echo " Running IAM Policy Binding..."
          gcloud compute images add-iam-policy-binding ${{ env.gcp_image_id }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --member="serviceAccount:${{ secrets.GCP_DEMO_ACCOUNT_EMAIL }}" \
            --role="roles/compute.imageUser"

          echo " Successfully shared image ${{ env.gcp_image_id }} with Demo Account."

          echo " Verifying IAM policies after change..."
          gcloud compute images get-iam-policy ${{ env.gcp_image_id }} --project=${{ secrets.GCP_PROJECT_ID }}
