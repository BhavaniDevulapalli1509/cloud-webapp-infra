name: Build and Share Packer Images

on:
  push:
    branches:
      - main  # Runs only when code is merged to the main branch

jobs:
  build-image:
    name: Build AWS & GCP Images with Packer
    runs-on: ubuntu-latest

    env:
     GOOGLE_APPLICATION_CREDENTIALS: ${{secrets.GCP_DEV_ACCESS_KEY}}


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up GCP Credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_DEV_ACCESS_KEY }}

      - name: Install Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      - name: Zip Repository Code
        run: |
          mkdir webapp                     
          cp -r $(ls -A | grep -v '^webapp$') webapp/                
          zip -r webapp.zip webapp -x "webapp/node_modules/*" "webapp/.git/*"
      
      

      - name: Run Packer to Build Images
        id: packer
        run: |
          cd packer
          packer init main.pkr.hcl
          packer build -machine-readable main.pkr.hcl | tee packer.log

          # Extract AWS AMI ID
          AMI_ID=$(awk -F, '/artifact,[0-9]+,id/ {print $6}' packer.log | grep 'ami-' | head -n1 | cut -d: -f2 | tr -d '[:space:]')

          # Extract GCP Image ID
          GCP_IMAGE_ID=$(awk -F, '/artifact,[0-9]+,id/ {print $6}' packer.log | grep -v 'ami-' | head -n1 | tr -d '[:space:]')

          # Validate and write to output
          if [[ "$AMI_ID" =~ ^ami-[a-zA-Z0-9]+$ ]]; then
              echo "New AWS AMI: $AMI_ID"
              echo "ami_id=$AMI_ID" >> $GITHUB_ENV
              echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
              echo "AMI_CREATED=true" >> $GITHUB_ENV
          else
              echo "Error: Invalid AMI format ($AMI_ID)"
              exit 1
          fi

          if [[ -n "$GCP_IMAGE_ID" ]]; then
              echo "New GCP Image: $GCP_IMAGE_ID"
              #echo "GCP_IMAGE_CREATED=true" >> $GITHUB_ENV
              echo "gcp_image_id=$GCP_IMAGE_ID" >> $GITHUB_ENV
              echo "gcp_image_id=$GCP_IMAGE_ID" >> $GITHUB_OUTPUT
              echo "$GOOGLE_APPLICATION_CREDENTIALS"
              echo "$GOOGLE_GHA_CREDS_PATH"
          else
              echo "Error: Invalid GCP Image ID ($GCP_IMAGE_ID)"
              exit 1
          fi
  
          
      - name: Share AWS AMI with Demo Account
        if: env.AMI_CREATED == 'true'
        run: |
          if [ -z "${{ secrets.DEMO_ACCOUNT_ID }}" ]; then
            echo "DEMO_ACCOUNT_ID is not set so skipping the AMI image sharing"
          else
            aws ec2 modify-image-attribute \
              --image-id ${{ env.ami_id }} \
              --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }}}]" \
              --region "${{ secrets.AWS_REGION }}"
          fi

        # Share the image with the DEMO GCP project
      - name: Share GCP Image with DEMO Account testing
        if: env.GCP_IMAGE_CREATED == 'true'
        run: |
          echo "Entered gcp"
          gcloud compute images add-iam-policy-binding ${{ env.gcp_image_id }} \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${{ secrets.GCP_DEMO_ACCOUNT_EMAIL }}" \
          --role="roles/compute.imageUser"

      - name: Reconfigure AWS CLI to DEMO Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update Launch Template with New AMI
        id: update_lt
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name ${{ secrets.LAUNCH_TEMPLATE_NAME }} \ \
            --source-version "\$Latest" \
            --launch-template-data "{\"ImageId\":\"${{ env.ami_id }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "new_lt_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "Updated launch template to version $NEW_VERSION"

          aws ec2 modify-launch-template \
            --launch-template-name ${{ secrets.LAUNCH_TEMPLATE_NAME }} \
            --default-version "\$Latest"

      - name: Start Instance Refresh
        id: refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --preferences '{"MinHealthyPercentage": 50}' \
            --query 'InstanceRefreshId' \
            --output text)

          echo "refresh_id=$REFRESH_ID" >> $GITHUB_ENV
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT
          echo "Started refresh: $REFRESH_ID"

      - name: Wait for Instance Refresh to Complete
        run: |
          echo "Waiting for ASG instance refresh to complete..."
          STATUS="InProgress"
          until [[ "$STATUS" != "InProgress" ]]; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
              --instance-refresh-ids ${{ env.refresh_id }} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)

            echo "Current status: $STATUS"
            if [[ "$STATUS" == "Failed" ]]; then
              echo "Instance refresh failed"
              exit 1
            fi
            sleep 30
          done

          echo "Instance refresh finished with status: $STATUS"


 